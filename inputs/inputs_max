amr.n_cell = 511 511 512 # number of grid points in x,y,z
                            # note that this is a pretty high resolution
                            # and requires a proper GPU to be computed.
                            # on CPU, this would take a significant amount of time
                            # for performance: 2^n-1 is the optimal number of grid points in x and y
                            # 2^n is also acceptable, but all other should be avoided at all costs.

hipace.normalized_units=1   # using normalized units. = 0 means SI units
hipace.verbose = 1          # amount of information that the simulation is printing

diagnostic.diag_type=xz     # only using 2D field diagnostics (3D diagnostics with high res are extremely expensive)
diagnostic.field_data = ExmBy Ez rho   # write only these 3 fields to file (without this input parameter, all are written to file)
amr.max_level = 0           # no mesh refinement

max_step = 0                  # = 0 means that only the plasma response to the initial beam is simulated
hipace.dt = adaptive          # adaptive time step, could also be a number, like 5 in normalized units or 5e-13 in SI units
diagnostic.output_period = 1  # period of the output, first and last step are always written to file


hipace.depos_order_xy = 2     # numerical parameter, not relevant for you

geometry.is_periodic = 1     1     0        # whether the particle boundary conditions are periodic in x,y,z
geometry.prob_lo     = -16.   -16.   -34    # physical domain in x,y,z
geometry.prob_hi     =  16.    16.    6

beams.names= beam #beam2 beam3 # note: remove the first # to also use beam2 and beam3
# currently only beam is generated
beam.profile = gaussian               # Gaussian beam
beam.injection_type = fixed_weight    # fixed_weight for random beam with equal weights
beam.do_symmetrize = 1                # symmetrize the beam to suppress hosing due to numerical noise
beam.num_particles =  1000000         # this is a large number, can be reduced significantly for lower resolutions
beam.density = 800
beam.u_mean = 0. 0. 10000             # ~ 5 GeV
beam.u_std = 3.535533906 3.535533906 0. # matched to the blowout
beam.position_mean = 0.0 0. 0
beam.position_std = 0.05 0.05 1.41      # rms beam size

# beam2 currently not used, just left it for learning something about how beams can be generated
beam2.injection_type = fixed_weight
beam2.num_particles = 10000000
beam2.element = positron
beam2.density = 260  #  350.
beam2.u_mean = 0. 0. 2000
beam2.u_std = 3.448275862 3.448275862 0  #4. 4. 0.
beam2.position_mean = 0. 0.0 -11.57
beam2.position_std = 0.029 0.029 0.5 # 0.025 0.025 0.5
beam2.do_symmetrize=1
beam2.n_subcycles = 10

# beam3 currently not used
beam3.injection_type = fixed_weight
beam3.num_particles = 10000000
beam3.element = positron
beam3.density = 44.6 # 60.
beam3.u_mean = 0. 0. 2000
beam3.u_std = 3.448275862 3.448275862 0  #4. 4. 0.
beam3.position_mean = 0. 0.0 -11.3
beam3.position_std = 0.029 0.029 0.2 #0.025 0.025 0.2
beam3.do_symmetrize=1
beam3.n_subcycles = 10

plasmas.names = electrons ions # names of the plasma species
electrons.element = electron
electrons.density(x,y,z) = 1.
electrons.radius = 2.5
electrons.ppc = 5 5
electrons.temperature_in_ev = 15
ions.charge = 1
ions.mass = 7349.388355 # Helium, note that this could have also be via ions.element = He and specifying the ionization level to 1
ions.density(x,y,z) = 1.
ions.radius = 2.5
ions.ppc = 5 5
