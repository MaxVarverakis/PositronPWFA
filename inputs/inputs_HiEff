my_constants.n0 = 7.8e21 # m^-3
my_constants.wp = sqrt( n0 * q_e^2/(m_e *epsilon0) )
my_constants.kp_inv = clight/wp
my_constants.kp = wp/clight

hipace.file_prefix  = diags/hdf5/recovery/HiEff
beams.insitu_file_prefix = diags/insitu/recovery/HiEff
plasmas.insitu_file_prefix = diags/insitu/recovery/HiEff

amr.n_cell = 511 511 512

hipace.normalized_units = 0   # using normalized units. = 0 means SI units
hipace.verbose = 1          # amount of information that the simulation is printing

diagnostic.diag_type = xz
diagnostic.field_data = Bx By Bz ExmBy EypBx Ez jx jx_beam jy jy_beam jz_beam rho
amr.max_level = 0           # no mesh refinement

max_step = 0 # 100
# hipace.max_time = (0.1/clight) * wp # 0.1 kp
hipace.dt = adaptive          # adaptive time step, could also be a number, like 5 in normalized units or 5e-13 in SI units
diagnostic.output_period = 1  # period of the output, first and last step are always written to file


hipace.depos_order_xy = 2

geometry.is_periodic = 1     1     0
geometry.prob_lo     = -8.*kp_inv   -8.*kp_inv   -34.*kp_inv    # physical domain in x,y,z
geometry.prob_hi     =  8.*kp_inv    8.*kp_inv     6.*kp_inv

beams.names = drive witness # recovery
beams.insitu_period = 1

drive.profile = gaussian               # Gaussian beam
drive.injection_type = fixed_weight    # fixed_weight for random beam with equal weights
drive.do_symmetrize = 1                # symmetrize the beam to suppress hosing due to numerical noise
drive.num_particles =  1000000
# drive.density = 23 * n0
drive.total_charge = 534.e-12
drive.u_mean = 0. 0. 4892.377958934683    # 2.5 GeV
drive.u_std = 3.535533906 3.535533906 0.
drive.position_mean = 0. 0. 0.
drive.position_std = 5.e-6 5.e-6 40.e-6      # rms beam size

witness.profile = can
witness.injection_type = fixed_weight
witness.num_particles = 1000000
witness.element = positron
# witness.density = 100 * n0
witness.total_charge = 102.e-12
witness.u_mean = 0. 0. 4892.377958934683  # 2.5 GeV
witness.u_std = 3.448275862 3.448275862 0
witness.position_mean = 0. 0.0 -306.e-6
witness.position_std = 2.e-6 2.e-6 0.15090512100343362*kp_inv
witness.do_symmetrize = 1
witness.n_subcycles = 10
witness.zmin =  -9.586131475196094*kp_inv
witness.zmax = -8.077080265161758*kp_inv

recovery.profile = gaussian
recovery.injection_type = from_file # fixed_weight
recovery.input_file = diags/hdf5/recovery/salame2/openpmd_%T.h5
recovery.openPMD_species_name = recovery
recovery.iteration = 0
recovery.do_symmetrize = 1                # symmetrize the beam to suppress hosing due to numerical noise
recovery.num_particles =  1000000 # 00       # this is a large number, can be reduced significantly for lower resolutions
recovery.density = 1600
recovery.u_mean = 0. 0. 10000 # 2000                # ~ 1 GeV
recovery.u_std = 3.535533906 3.535533906 0. # matched to the blowout
recovery.position_mean = 0.0 0.   -21.25 # -21 # -17.5 # 
recovery.position_std = 0.029 0.029  .25 # .25 # 0.3525 # 0.25 0.65    # rms beam size

plasmas.names = electrons ions # names of the plasma species
plasmas.insitu_period = 1
electrons.element = electron
electrons.density(x,y,z) = n0
# electrons.radius = 2.5*kp_inv
electrons.ppc = 5 5
# electrons.temperature_in_ev = 15
ions.charge = +q_e
ions.mass = 7349.388355 # Helium, note that this could have also be via ions.element = He and specifying the ionization level to 1
ions.density(x,y,z) = n0
# ions.radius = 2.5*kp_inv
ions.ppc = 5 5
